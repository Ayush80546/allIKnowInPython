Different types of Exception in python
-Some of the most common types of exceptions in Python:
--SyntaxError: When syntax error in code ex misspelled keyword, a missing colon, unbalenced paranthesis etc.
--TypeError: when a operation or function is applied to an object of wrong type.
--NameError: when a variable or function name is not found in the current scope.
--IndexError: when an index is out of range for sequence types.
--KeyError: When a key is not found in a dictionery
--ValueError: When a function or method is called with invalid arguments or input.
--AttributeError When a attribute or method is not found in a object.
--IOError: When I/O operation, such as reading or writing a file, fils due to input/output.
--ZeroDivisionError: When an attempt is made to divide a number with zero.
--ImportError: When import statement fails to find or load a module.

-Exception:When the syntax is correct but the code results in a error it does not stop the execution of program however it changes the normal flow of program.
-We use try except else finally block to handle a exception.
-We can raise an exception using raise keyword This must be either an exception instance or an exception class
--try: 
    raise NameError("Hi there")
  except NameError:
    print ("An exception")
    raise 
-Advantages of Exception Handling:
Improved program reliability: By handling exceptions properly, you can prevent your program from crashing or producing incorrect results due to unexpected errors or input.
Simplified error handling: Exception handling allows you to separate error handling code from the main program logic, making it easier to read and maintain your code.
Cleaner code: With exception handling, you can avoid using complex conditional statements to check for errors, leading to cleaner and more readable code.
Easier debugging: When an exception is raised, the Python interpreter prints a traceback that shows the exact location where the exception occurred, making it easier to debug your code.
-Disadvantages of Exception Handling:
Performance overhead: Exception handling can be slower than using conditional statements to check for errors, as the interpreter has to perform additional work to catch and handle the exception.
Increased code complexity: Exception handling can make your code more complex, especially if you have to handle multiple types of exceptions or implement complex error handling logic.
Possible security risks: Improperly handled exceptions can potentially reveal sensitive information or create security vulnerabilities in your code, so itâ€™s important to handle exceptions carefully and avoid exposing too much information about your program.
